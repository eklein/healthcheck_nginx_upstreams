diff --git a/src/http/ngx_http_upstream.c b/src/http/ngx_http_upstream.c
index e8d8773..1fba036 100644
--- a/src/http/ngx_http_upstream.c
+++ b/src/http/ngx_http_upstream.c
@@ -4259,6 +4259,17 @@ ngx_http_upstream_add(ngx_conf_t *cf, ngx_url_t *u, ngx_uint_t flags)
     uscf->line = cf->conf_file->line;
     uscf->port = u->port;
     uscf->default_port = u->default_port;
+#if (NGX_HTTP_HEALTHCHECK)
+    uscf->healthcheck_enabled = 0;
+    uscf->health_delay = 10000;
+    uscf->health_timeout = 2000;
+    uscf->health_failcount = 2;
+    uscf->health_buffersize = 1000;
+    uscf->health_send.data = (u_char*)"";
+    uscf->health_send.len = 0;
+    uscf->health_expected.len = NGX_CONF_UNSET_SIZE;
+    uscf->health_expected.data = NGX_CONF_UNSET_PTR;
+#endif
 
     if (u->naddrs == 1) {
         uscf->servers = ngx_array_create(cf->pool, 1,
diff --git a/src/http/ngx_http_upstream.h b/src/http/ngx_http_upstream.h
index ef460a4..476a7be 100644
--- a/src/http/ngx_http_upstream.h
+++ b/src/http/ngx_http_upstream.h
@@ -106,6 +106,30 @@ struct ngx_http_upstream_srv_conf_s {
 
     ngx_array_t                     *servers;  /* ngx_http_upstream_server_t */
 
+#if (NGX_HTTP_UPSTREAM_HASH)
+    ngx_array_t                     *values;
+    ngx_array_t                     *lengths;
+    ngx_uint_t                       retries;
+#endif
+
+#if (NGX_HTTP_HEALTHCHECK)
+    // If true, healthchecking is enabled for this upstream
+    unsigned                         healthcheck_enabled:1;
+    // Delay between healthchecks (in sec)
+    time_t                           health_delay;
+    // Total time a healthcheck is allowed to execute
+    ngx_msec_t                       health_timeout;
+    // Number of good/bad results indicate the node is up/down
+    ngx_int_t                        health_failcount;
+    // Size of the body+headers buffer
+    ngx_int_t                        health_buffersize;
+    // What is sent to initiate the healthcheck
+    ngx_str_t                        health_send;
+    // Expected from healthcheck, excluding headers
+    ngx_str_t                        health_expected;
+#endif
+
+
     ngx_uint_t                       flags;
     ngx_str_t                        host;
     u_char                          *file_name;
diff --git a/src/http/ngx_http_upstream_round_robin.c b/src/http/ngx_http_upstream_round_robin.c
index 52bd808..daec940 100644
--- a/src/http/ngx_http_upstream_round_robin.c
+++ b/src/http/ngx_http_upstream_round_robin.c
@@ -4,6 +4,8 @@
  */
 
 
+/* on top, so it won't collide with ngx_supervisord's patch */
+#include <ngx_http_healthcheck_module.h>
 #include <ngx_config.h>
 #include <ngx_core.h>
 #include <ngx_http.h>
@@ -14,7 +16,6 @@ static ngx_int_t ngx_http_upstream_cmp_servers(const void *one,
 static ngx_uint_t
 ngx_http_upstream_get_peer(ngx_http_upstream_rr_peers_t *peers);
 
-
 ngx_int_t
 ngx_http_upstream_init_round_robin(ngx_conf_t *cf,
     ngx_http_upstream_srv_conf_t *us)
@@ -23,6 +24,7 @@ ngx_http_upstream_init_round_robin(ngx_conf_t *cf,
     ngx_uint_t                     i, j, n;
     ngx_http_upstream_server_t    *server;
     ngx_http_upstream_rr_peers_t  *peers, *backup;
+    ngx_int_t                      health_index;
 
     us->peer.init = ngx_http_upstream_init_round_robin_peer;
 
@@ -57,6 +59,14 @@ ngx_http_upstream_init_round_robin(ngx_conf_t *cf,
                     continue;
                 }
 
+                /* on top, so it won't collide with ngx_supervisord's patch */
+                health_index = ngx_http_healthcheck_add_peer(us,
+                                   &server[i].addrs[j], cf->pool);
+                if (health_index == NGX_ERROR) {
+                    return NGX_ERROR;
+                }
+                peers->peer[n].health_index = health_index;
+
                 peers->peer[n].sockaddr = server[i].addrs[j].sockaddr;
                 peers->peer[n].socklen = server[i].addrs[j].socklen;
                 peers->peer[n].name = server[i].addrs[j].name;
@@ -399,6 +409,12 @@ ngx_http_upstream_get_round_robin_peer(ngx_peer_connection_t *pc, void *data)
     if (rrp->peers->single) {
         peer = &rrp->peers->peer[0];
 
+#if (NGX_HTTP_HEALTHCHECK)
+        if (ngx_http_healthcheck_is_down(peer->health_index, pc->log)) {
+            return NGX_BUSY;
+        }
+#endif
+
     } else {
 
         /* there are several peers */
@@ -425,6 +441,12 @@ ngx_http_upstream_get_round_robin_peer(ngx_peer_connection_t *pc, void *data)
 
                     if (!peer->down) {
 
+#if (NGX_HTTP_HEALTHCHECK)
+                        if (ngx_http_healthcheck_is_down(peer->health_index, pc->log)) {
+                            rrp->tried[n] |= m;
+                        } else {
+#endif
+
                         if (peer->max_fails == 0
                             || peer->fails < peer->max_fails)
                         {
@@ -436,6 +458,10 @@ ngx_http_upstream_get_round_robin_peer(ngx_peer_connection_t *pc, void *data)
                             break;
                         }
 
+#if (NGX_HTTP_HEALTHCHECK)
+                        }
+#endif
+
                         peer->current_weight = 0;
 
                     } else {
@@ -473,6 +499,12 @@ ngx_http_upstream_get_round_robin_peer(ngx_peer_connection_t *pc, void *data)
 
                     if (!peer->down) {
 
+#if (NGX_HTTP_HEALTHCHECK)
+                        if (ngx_http_healthcheck_is_down(peer->health_index, pc->log)) {
+                            rrp->tried[n] |= m;
+                        } else {
+#endif
+
                         if (peer->max_fails == 0
                             || peer->fails < peer->max_fails)
                         {
@@ -484,6 +516,10 @@ ngx_http_upstream_get_round_robin_peer(ngx_peer_connection_t *pc, void *data)
                             break;
                         }
 
+#if (NGX_HTTP_HEALTHCHECK)
+                        }
+#endif
+
                         peer->current_weight = 0;
 
                     } else {
@@ -574,7 +610,6 @@ failed:
     return NGX_BUSY;
 }
 
-
 static ngx_uint_t
 ngx_http_upstream_get_peer(ngx_http_upstream_rr_peers_t *peers)
 {
diff --git a/src/http/ngx_http_upstream_round_robin.h b/src/http/ngx_http_upstream_round_robin.h
index a9cb257..aee17b5 100644
--- a/src/http/ngx_http_upstream_round_robin.h
+++ b/src/http/ngx_http_upstream_round_robin.h
@@ -26,6 +26,7 @@ typedef struct {
 
     ngx_uint_t                      max_fails;
     time_t                          fail_timeout;
+    ngx_int_t                       health_index;
 
     ngx_uint_t                      down;          /* unsigned  down:1; */
 
